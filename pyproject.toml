[build-system]
requires = ["setuptools>=68", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "loxone-mcp"
version = "0.1.0"
description = "MCP server for controlling Loxone Gen1 home automation systems"
authors = [
    {name = "R", email = "r@example.com"},
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Home Automation",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "fastmcp>=2.0",
    "fastapi>=0.104.0",
    "keyring>=24.0.0",
    "httpx>=0.25.0",
    "python-dotenv>=1.0.0",
    "websockets>=12.0",
    "aiohttp>=3.8.0",
    "cryptography>=45.0.3",
    "infisicalsdk>=1.0.3",
    "zeroconf>=0.129.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-asyncio>=0.20",
    "pytest-cov>=4.0",
    "ruff>=0.1.0",
    "mypy>=1.0",
    "bandit[toml]>=1.7",
    "safety>=2.3",
    "pip-audit>=2.0",
    "hypothesis>=6.0",
]

[project.urls]
Homepage = "https://github.com/r/mcp-loxone-gen1"
Repository = "https://github.com/r/mcp-loxone-gen1"
Issues = "https://github.com/r/mcp-loxone-gen1/issues"

[project.scripts]
loxone-mcp = "loxone_mcp:run"
loxone-mcp-server = "loxone_mcp.server:run"
loxone-mcp-sse = "loxone_mcp.sse_server:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
loxone_mcp = ["py.typed"]

# Ruff configuration
[tool.ruff]
target-version = "py311"
line-length = 100
indent-width = 4
src = ["src"]

# Exclude common directories
exclude = [
    ".git",
    ".venv",
    "__pycache__",
    "dist",
    "build",
    "*.egg-info",
]

[tool.ruff.lint]
# Enable specific rule sets
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings  
    "F",     # pyflakes
    "I",     # isort
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
    "UP",    # pyupgrade
    "ARG",   # flake8-unused-arguments
    "SIM",   # flake8-simplify
    "TID",   # flake8-tidy-imports
    "RUF",   # Ruff-specific rules
    "S",     # flake8-bandit (security)
    "ANN",   # flake8-annotations
    "ASYNC", # flake8-async
]

# Ignore specific rules
ignore = [
    "ANN101",   # Missing type annotation for self
    "ANN102",   # Missing type annotation for cls
    "ANN401",   # Dynamically typed expressions (Any)
    "S101",     # Use of assert detected
    "S105",     # Possible hardcoded password
    "S106",     # Possible hardcoded password
    "B008",     # Do not perform function call in argument defaults
    "S324",     # Probable use of insecure hash functions (required for Loxone auth)
    "ASYNC109", # Async function with timeout parameter (would require major refactoring)
    "S112",     # Try-except-continue without logging (informational)
    "S110",     # Try-except-pass without logging (informational)
]

# Allow autofix for all enabled rules
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.per-file-ignores]
# Ignore security warnings in test files
"test_*.py" = ["S101", "S105", "S106"]
"tests/*.py" = ["S101", "S105", "S106"]
# Ignore import issues in __init__.py
"__init__.py" = ["F401"]

[tool.ruff.format]
# Use double quotes for strings
quote-style = "double"

# Indent with spaces
indent-style = "space"

# Unix-style line endings
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["loxone_mcp"]

[tool.ruff.lint.mccabe]
# Maximum complexity
max-complexity = 10

# MyPy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true

[[tool.mypy.overrides]]
module = [
    "keyring.*",
    "mcp.*",
    "fastmcp.*",
    "infisicalsdk.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
asyncio_mode = "auto"
addopts = [
    "--verbose",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
]

# Bandit security configuration
[tool.bandit]
exclude_dirs = [".venv", "venv", "tests"]
skips = ["B101", "B324", "B601"]

[dependency-groups]
dev = [
    "bandit[toml]>=1.8.3",
    "hypothesis>=6.135.6",
    "mypy>=1.16.0",
    "pip-audit>=2.9.0",
    "pytest>=8.4.0",
    "pytest-asyncio>=1.0.0",
    "pytest-cov>=6.1.1",
    "ruff>=0.11.13",
]
