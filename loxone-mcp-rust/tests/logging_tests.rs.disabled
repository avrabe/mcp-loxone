//! Tests for logging functionality

use loxone_mcp_rust::logging::{LogConfig, LoggingMiddleware};
use serde_json::json;

#[test]
fn test_log_config_from_env() {
    // Save current env vars
    let orig_rust_log = std::env::var("RUST_LOG").ok();
    let orig_log_file = std::env::var("LOXONE_LOG_FILE").ok();

    // Test with different RUST_LOG levels
    std::env::set_var("RUST_LOG", "debug");
    let config = LogConfig::from_env();
    assert_eq!(config.level, tracing::Level::DEBUG);

    std::env::set_var("RUST_LOG", "trace");
    let config = LogConfig::from_env();
    assert_eq!(config.level, tracing::Level::TRACE);

    // Test with log file
    std::env::set_var("LOXONE_LOG_FILE", "/tmp/test.log");
    let config = LogConfig::from_env();
    assert_eq!(
        config.file_path,
        Some(std::path::PathBuf::from("/tmp/test.log"))
    );

    // Restore env vars
    if let Some(val) = orig_rust_log {
        std::env::set_var("RUST_LOG", val);
    } else {
        std::env::remove_var("RUST_LOG");
    }

    if let Some(val) = orig_log_file {
        std::env::set_var("LOXONE_LOG_FILE", val);
    } else {
        std::env::remove_var("LOXONE_LOG_FILE");
    }
}

#[test]
fn test_parameter_sanitization() {
    let params = json!({
        "device": "Living Room",
        "password": "secret123",
        "api_key": "key123",
        "action": "on",
        "token": "bearer-token",
        "normal_field": "normal_value"
    });

    let sanitized = LoggingMiddleware::sanitize_params(&params);

    // Normal fields should be preserved
    assert_eq!(sanitized["device"], "Living Room");
    assert_eq!(sanitized["action"], "on");
    assert_eq!(sanitized["normal_field"], "normal_value");

    // Sensitive fields should be masked
    assert_eq!(sanitized["password"], "***");
    assert_eq!(sanitized["api_key"], "***");
    assert_eq!(sanitized["token"], "***");
}

#[test]
fn test_nested_sanitization() {
    let params = json!({
        "device": "Test Device",
        "config": {
            "host": "192.168.1.100",
            "credentials": {
                "username": "admin",
                "password": "secret",
                "api_secret": "hidden"
            }
        }
    });

    let sanitized = LoggingMiddleware::sanitize_params(&params);

    assert_eq!(sanitized["device"], "Test Device");
    assert_eq!(sanitized["config"]["host"], "192.168.1.100");
    assert_eq!(sanitized["config"]["credentials"]["username"], "admin");
    assert_eq!(sanitized["config"]["credentials"]["password"], "***");
    assert_eq!(sanitized["config"]["credentials"]["api_secret"], "***");
}

#[test]
fn test_array_sanitization() {
    let params = json!({
        "devices": ["device1", "device2", "device3"],
        "secrets": [
            {"name": "test", "password": "secret1"},
            {"name": "prod", "password": "secret2"}
        ]
    });

    let sanitized = LoggingMiddleware::sanitize_params(&params);

    assert_eq!(
        sanitized["devices"],
        json!(["device1", "device2", "device3"])
    );

    let secrets = sanitized["secrets"].as_array().unwrap();
    assert_eq!(secrets[0]["name"], "test");
    assert_eq!(secrets[0]["password"], "***");
    assert_eq!(secrets[1]["name"], "prod");
    assert_eq!(secrets[1]["password"], "***");
}

#[test]
fn test_response_truncation() {
    let large_data = "x".repeat(2000);
    let response = json!({
        "status": "success",
        "data": {
            "large_field": large_data
        }
    });

    let sanitized = LoggingMiddleware::sanitize_response(&response);

    assert_eq!(sanitized["status"], "success");

    let data_str = sanitized["data"].as_str().unwrap();
    assert!(data_str.contains("truncated"));
    assert!(data_str.contains("2000 bytes total"));
}

#[test]
fn test_array_truncation() {
    let large_array: Vec<i32> = (0..100).collect();
    let response = json!({
        "items": large_array
    });

    let sanitized = LoggingMiddleware::sanitize_response(&response);

    let items = sanitized["items"].as_array().unwrap();
    assert_eq!(items.len(), 11); // 10 items + truncation message

    // Check truncation message
    let last_item = items.last().unwrap().as_str().unwrap();
    assert!(last_item.contains("90 more items"));
}

#[test]
fn test_sensitive_field_detection() {
    let sensitive_fields = vec![
        "password",
        "PASSWORD",
        "api_key",
        "apiKey",
        "secret_token",
        "auth_header",
        "credential_data",
        "AuthToken",
    ];

    for field in sensitive_fields {
        let params = json!({ field: "sensitive_value" });
        let sanitized = LoggingMiddleware::sanitize_params(&params);
        assert_eq!(
            sanitized[field], "***",
            "Field '{}' should be sanitized",
            field
        );
    }
}
