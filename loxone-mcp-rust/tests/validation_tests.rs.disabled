//! Unit tests for input validation

use loxone_mcp_rust::validation::{InputValidator, ToolParameterValidator, ValidationLimits};

#[test]
fn test_uuid_validation_valid() {
    let valid_uuids = vec![
        "550e8400-e29b-41d4-a716-446655440000",
        "6ba7b810-9dad-11d1-80b4-00c04fd430c8",
        "00000000-0000-0000-0000-000000000000",
    ];

    for uuid in valid_uuids {
        assert!(
            InputValidator::validate_uuid(uuid).is_ok(),
            "UUID {} should be valid",
            uuid
        );
    }
}

#[test]
fn test_uuid_validation_invalid() {
    let invalid_uuids = vec![
        "",
        "not-a-uuid",
        "550e8400-e29b-41d4-a716-44665544000g", // Invalid character
        "550e8400-e29b-41d4-a716-4466554400000", // Too long
        "550e8400-e29b-41d4-a716",              // Too short
        "550e8400e29b41d4a716446655440000",     // No hyphens
    ];

    for uuid in invalid_uuids {
        assert!(
            InputValidator::validate_uuid(uuid).is_err(),
            "UUID {} should be invalid",
            uuid
        );
    }
}

#[test]
fn test_name_validation_valid() {
    let valid_names = vec![
        "Living Room",
        "K端che",
        "B端ro-123",
        "Master_Bedroom",
        "Wohnzimmer S端d",
        "Room 42",
    ];

    for name in valid_names {
        assert!(
            InputValidator::validate_name(name).is_ok(),
            "Name {} should be valid",
            name
        );
    }
}

#[test]
fn test_name_validation_invalid() {
    let invalid_names = vec![
        "",
        "../etc/passwd",
        "Room;DROP TABLE",
        "Test\0Name",
        &"a".repeat(ValidationLimits::MAX_NAME_LENGTH + 1),
        "Room<script>",
        "Name|Command",
    ];

    for name in invalid_names {
        assert!(
            InputValidator::validate_name(name).is_err(),
            "Name {} should be invalid",
            name
        );
    }
}

#[test]
fn test_action_validation_valid() {
    let valid_actions = vec![
        "on",
        "off",
        "up",
        "down",
        "dim-50",
        "set_temperature",
        "pulse_100ms",
    ];

    for action in valid_actions {
        assert!(
            InputValidator::validate_action(action).is_ok(),
            "Action {} should be valid",
            action
        );
    }
}

#[test]
fn test_action_validation_invalid() {
    let invalid_actions = vec![
        "",
        "on;ls",
        "off|cat",
        "up&pwd",
        "down$USER",
        "dim`whoami`",
        &"a".repeat(ValidationLimits::MAX_ACTION_LENGTH + 1),
        "action\ncommand",
        "test\0action",
    ];

    for action in invalid_actions {
        assert!(
            InputValidator::validate_action(action).is_err(),
            "Action {} should be invalid",
            action
        );
    }
}

#[test]
fn test_host_validation_valid() {
    let valid_hosts = vec![
        "192.168.1.100",
        "192.168.1.100:8080",
        "10.0.0.1",
        "loxone.local",
        "miniserver.home.lan",
        "my-loxone-server.example.com",
        "server123.test",
        "loxone-01.local:443",
    ];

    for host in valid_hosts {
        assert!(
            InputValidator::validate_host(host).is_ok(),
            "Host {} should be valid",
            host
        );
    }
}

#[test]
fn test_host_validation_invalid() {
    let invalid_hosts = vec![
        "",
        "192.168.1.256", // Invalid IP
        "192.168.1",     // Incomplete IP
        "host with spaces",
        "host;command",
        "host|pipe",
        &"a".repeat(254), // Too long
        "host\0null",
        "-invalid.start",
        "invalid-.end",
    ];

    for host in invalid_hosts {
        assert!(
            InputValidator::validate_host(host).is_err(),
            "Host {} should be invalid",
            host
        );
    }
}

#[test]
fn test_numeric_range_validation() {
    // Temperature validation
    assert!(InputValidator::validate_numeric_range(20.0, 5.0, 30.0, "Temperature").is_ok());
    assert!(InputValidator::validate_numeric_range(5.0, 5.0, 30.0, "Temperature").is_ok());
    assert!(InputValidator::validate_numeric_range(30.0, 5.0, 30.0, "Temperature").is_ok());

    // Out of range
    assert!(InputValidator::validate_numeric_range(4.9, 5.0, 30.0, "Temperature").is_err());
    assert!(InputValidator::validate_numeric_range(30.1, 5.0, 30.0, "Temperature").is_err());

    // Integer ranges
    assert!(InputValidator::validate_numeric_range(50, 0, 100, "Percentage").is_ok());
    assert!(InputValidator::validate_numeric_range(101, 0, 100, "Percentage").is_err());
}

#[test]
fn test_batch_size_validation() {
    assert!(InputValidator::validate_batch_size(1).is_ok());
    assert!(InputValidator::validate_batch_size(50).is_ok());
    assert!(InputValidator::validate_batch_size(ValidationLimits::MAX_BATCH_SIZE).is_ok());

    assert!(InputValidator::validate_batch_size(0).is_err());
    assert!(InputValidator::validate_batch_size(ValidationLimits::MAX_BATCH_SIZE + 1).is_err());
}

#[test]
fn test_sanitize_for_display() {
    assert_eq!(
        InputValidator::sanitize_for_display("Normal text"),
        "Normal text"
    );

    assert_eq!(
        InputValidator::sanitize_for_display("Text with\nnewline"),
        "Text with\nnewline"
    );

    assert_eq!(
        InputValidator::sanitize_for_display("Text\0with\x01control\x1Fchars"),
        "Text withcontrolchars"
    );

    let long_text = "a".repeat(2000);
    assert_eq!(InputValidator::sanitize_for_display(&long_text).len(), 1000);
}

#[test]
fn test_tool_parameter_validation() {
    // Valid device control
    assert!(ToolParameterValidator::validate_device_control(
        "550e8400-e29b-41d4-a716-446655440000",
        "on"
    )
    .is_ok());

    assert!(ToolParameterValidator::validate_device_control("Living Room Light", "dim-50").is_ok());

    // Invalid device control
    assert!(ToolParameterValidator::validate_device_control("../etc/passwd", "on").is_err());

    assert!(ToolParameterValidator::validate_device_control("Device", "on;ls").is_err());

    // Room control
    assert!(ToolParameterValidator::validate_room_control("K端che", "off").is_ok());

    assert!(ToolParameterValidator::validate_room_control("", "off").is_err());

    // Temperature validation
    assert!(ToolParameterValidator::validate_temperature("Bedroom", 22.5).is_ok());
    assert!(ToolParameterValidator::validate_temperature("Bedroom", 35.0).is_err());
    assert!(ToolParameterValidator::validate_temperature("Bedroom", 2.0).is_err());
}

#[test]
fn test_payload_size_validation() {
    let small_payload = r#"{"device": "test", "action": "on"}"#;
    assert!(InputValidator::validate_payload_size(small_payload).is_ok());

    let large_payload = "a".repeat(ValidationLimits::MAX_PAYLOAD_SIZE + 1);
    assert!(InputValidator::validate_payload_size(&large_payload).is_err());
}
