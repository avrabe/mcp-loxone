name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  build-release:
    name: Build Release
    needs: create-release
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: loxone-mcp-server-linux-amd64
          - target: x86_64-apple-darwin
            os: macos-latest
            name: loxone-mcp-server-darwin-amd64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: loxone-mcp-server-darwin-arm64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: loxone-mcp-server-windows-amd64.exe
          # WASM target - TEMPORARILY DISABLED
          # TODO: Re-enable once WASM support is properly implemented
          # - target: wasm32-wasip2
          #   os: ubuntu-latest
          #   name: loxone-mcp-server.wasm
          #   features: wasm
          #   no-default-features: true
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Build
        run: |
          if [ "${{ matrix.no-default-features }}" = "true" ]; then
            cargo build --release --target ${{ matrix.target }} --features "${{ matrix.features }}" --no-default-features
          else
            cargo build --release --target ${{ matrix.target }}
          fi
        shell: bash
      
      - name: Strip binary (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          if [ "${{ matrix.os }}" = "macos-latest" ]; then
            strip target/${{ matrix.target }}/release/loxone-mcp-server
          else
            strip target/${{ matrix.target }}/release/loxone-mcp-server
          fi
      
      - name: Package binary
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a ${{ matrix.name }}.zip ./target/${{ matrix.target }}/release/loxone-mcp-server.exe
          else
            tar czf ${{ matrix.name }}.tar.gz -C ./target/${{ matrix.target }}/release loxone-mcp-server
          fi
        shell: bash
      
      - name: Upload Release Asset (tar.gz)
        if: matrix.os != 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.name }}.tar.gz
          asset_name: ${{ matrix.name }}.tar.gz
          asset_content_type: application/gzip
      
      - name: Upload Release Asset (zip)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.name }}.zip
          asset_name: ${{ matrix.name }}.zip
          asset_content_type: application/zip
      
