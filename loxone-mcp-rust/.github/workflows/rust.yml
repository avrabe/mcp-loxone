name: Rust CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'loxone-mcp-rust/**'
      - '.github/workflows/rust.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'loxone-mcp-rust/**'
      - '.github/workflows/rust.yml'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, beta]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Check formatting
      run: cargo fmt --all -- --check
      working-directory: ./loxone-mcp-rust
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
      working-directory: ./loxone-mcp-rust
    
    - name: Run tests
      run: cargo test --all-features --verbose
      working-directory: ./loxone-mcp-rust
    
    - name: Run tests (no default features)
      run: cargo test --no-default-features --verbose
      working-directory: ./loxone-mcp-rust

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install cargo-audit
      run: cargo install cargo-audit
    
    - name: Run security audit
      run: cargo audit
      working-directory: ./loxone-mcp-rust

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview
    
    - name: Install cargo-llvm-cov
      run: cargo install cargo-llvm-cov
    
    - name: Generate coverage
      run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
      working-directory: ./loxone-mcp-rust
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./loxone-mcp-rust/lcov.info
        fail_ci_if_error: false

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./loxone-mcp-rust
        push: false
        tags: loxone-mcp-rust:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  wasm:
    name: WASM Build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-wasip2
    
    - name: Build WASM
      run: cargo build --target wasm32-wasip2 --release
      working-directory: ./loxone-mcp-rust
    
    - name: Check WASM size
      run: |
        ls -lh target/wasm32-wasip2/release/*.wasm
        size=$(stat -c%s target/wasm32-wasip2/release/loxone_mcp_rust.wasm)
        if [ $size -gt 10485760 ]; then
          echo "WASM binary too large: $size bytes (max 10MB)"
          exit 1
        fi
      working-directory: ./loxone-mcp-rust