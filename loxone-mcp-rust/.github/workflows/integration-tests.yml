name: Integration Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y curl jq
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest requests sseclient-py
    
    - name: Install Node.js (for MCP Inspector)
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install MCP Inspector
      run: npm install -g @modelcontextprotocol/inspector
    
    - name: Build project
      run: cargo build --release
    
    - name: Run quick integration tests
      run: make integration-quick
    
    - name: Run full Python integration tests
      run: make integration-full
    
    - name: Upload test logs on failure
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: test-logs
        path: /tmp/mcp_test_server.log

  compatibility-tests:
    name: MCP Compatibility Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y curl jq
    
    - name: Build server
      run: cargo build --release
    
    - name: Test curl compatibility
      run: |
        # Start server in background
        cargo run --bin loxone-mcp-server -- http --port 3003 --dev-mode &
        SERVER_PID=$!
        sleep 5
        
        # Test curl SSE connection
        echo "Testing curl SSE connection..."
        timeout 5 curl -N -H "Accept: text/event-stream" -H "X-API-Key: 1234" \
          http://localhost:3003/sse | head -5 | grep -q "endpoint"
        
        # Test curl POST request
        echo "Testing curl POST request..."
        curl -X POST -H "Content-Type: application/json" -H "Accept: application/json" \
          -H "X-API-Key: 1234" -d '{"jsonrpc":"2.0","id":"test","method":"initialize","params":{"protocolVersion":"2025-03-26","capabilities":{},"clientInfo":{"name":"test","version":"1.0.0"}}}' \
          http://localhost:3003/messages | jq -e '.result.server_info.name == "loxone-mcp-server"'
        
        # Cleanup
        kill $SERVER_PID
    
    - name: Test httpie compatibility
      run: |
        pip install httpie
        
        # Start server in background
        cargo run --bin loxone-mcp-server -- http --port 3003 --dev-mode &
        SERVER_PID=$!
        sleep 5
        
        # Test httpie request
        echo "Testing httpie compatibility..."
        http POST localhost:3003/messages \
          Content-Type:application/json \
          Accept:application/json \
          X-API-Key:1234 \
          jsonrpc=2.0 \
          id=test \
          method=initialize \
          params:='{"protocolVersion":"2025-03-26","capabilities":{},"clientInfo":{"name":"httpie-test","version":"1.0.0"}}' \
          --print=b | jq -e '.result.server_info.name == "loxone-mcp-server"'
        
        # Cleanup
        kill $SERVER_PID