name: CI

on:
  pull_request:
    branches: [ main, master, develop ]
  push:
    branches: [ main, master, develop ]

env:
  PYTHON_VERSION: "3.13"
  RUST_VERSION: "1.75"

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies and package
        run: |
          uv sync --dev
      
      - name: Run Ruff linter
        run: |
          uv run ruff check src/ tests/
      
      - name: Run Ruff formatter check
        run: |
          uv run ruff format --check src/ tests/

  type-check:
    name: Type Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies and package
        run: |
          uv sync --dev
      
      - name: Run mypy
        run: |
          uv run mypy src/ --ignore-missing-imports --check-untyped-defs || true

  security-check:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install security tools and package
        run: |
          uv sync --dev
      
      - name: Run Bandit security linter
        run: |
          uv run bandit -r src/ -ll
      
      - name: Check for known vulnerabilities
        run: |
          uv run pip-audit || true
      
      - name: Check for hardcoded secrets
        run: |
          # Check for common patterns that might indicate credentials
          ! grep -rE "(password|passwd|pwd|secret|api_key|apikey|token|credential)\s*=\s*[\"'][^\"']+[\"']" src/ --include="*.py" || (echo "Potential hardcoded secrets found!" && exit 1)
          ! grep -rE "([0-9]{1,3}\.){3}[0-9]{1,3}" src/ --include="*.py" || echo "Warning: IP addresses found in code"
          ! grep -rE "(BEGIN (RSA|DSA|EC|OPENSSH) PRIVATE KEY|BEGIN CERTIFICATE)" src/ || (echo "Private keys or certificates found!" && exit 1)

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12", "3.13"]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install dependencies and package
        run: |
          uv sync --dev
      
      - name: Run tests
        run: |
          # Run tests if they exist, otherwise skip
          if [ -d "tests" ]; then
            uv run python -m pytest tests/ -v --cov=src/loxone_mcp --cov-report=term-missing
          else
            echo "No tests directory found, skipping tests"
          fi
      
      - name: Test MCP server startup
        run: |
          # Just check if the server can be imported without errors
          uv run python -c "from loxone_mcp import mcp; print('Server module imports successfully')"
      
      - name: Test MCP transport modes
        run: |
          # Test both stdio and SSE transport modules can be imported
          uv run python -c "
          import loxone_mcp.server as server;
          import loxone_mcp.sse_server as sse;
          print('✅ stdio transport: server module imported');
          print('✅ SSE transport: sse_server module imported');
          print('✅ FastMCP has required methods:', hasattr(server.mcp, 'run_stdio_async'), hasattr(server.mcp, 'run_sse_async'));
          "
      
      - name: Run transport-specific tests
        run: |
          # Run the transport tests specifically
          uv run python -m pytest tests/test_mcp_transports.py -v --tb=short

  validate-mcp:
    name: Validate MCP Implementation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies and package
        run: |
          uv sync --dev
      
      - name: Validate MCP server
        run: |
          # Check if server exposes required MCP methods
          uv run python << 'EOF'
          import inspect
          from loxone_mcp.server import mcp
          import loxone_mcp.server as server_module
          
          print('Checking MCP server implementation...')
          
          tools = []
          prompts = []
          resources = []
          
          # Check for decorated functions by examining source code
          for name, obj in inspect.getmembers(server_module):
              if inspect.isfunction(obj) and not name.startswith('_'):
                  try:
                      source = inspect.getsource(obj)
                      if '@mcp.tool(' in source or '@mcp.tool()' in source:
                          tools.append(name)
                      elif '@mcp.prompt(' in source:
                          prompts.append(name)
                      elif '@mcp.resource(' in source:
                          resources.append(name)
                  except (OSError, TypeError):
                      continue
          
          print(f'Found {len(tools)} tools: {tools}')
          print(f'Found {len(prompts)} prompts: {prompts}')
          print(f'Found {len(resources)} resources: {resources}')
          
          # Basic validation
          assert len(tools) > 0, 'No MCP tools found!'
          assert len(prompts) > 0, 'No MCP prompts found!'
          print('✅ MCP server validation passed!')
          EOF

  build:
    name: Build Package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Build package
        run: |
          uv build
      
      - name: Check package
        run: |
          uv add --dev twine
          uv run twine check dist/*
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

  check-dependencies:
    name: Check Dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Check for dependency conflicts
        run: |
          uv sync --dev
          uv run python -c "import pkg_resources; print('Dependencies OK')" || true
      
      - name: Generate dependency tree
        run: |
          uv add --dev pipdeptree
          uv run pipdeptree

  # ============================================================================
  # RUST IMPLEMENTATION CI JOBS
  # ============================================================================

  rust-lint:
    name: Rust Lint & Format
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./loxone-mcp-rust
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: loxone-mcp-rust

      - name: Check Rust formatting
        run: cargo fmt --all -- --check

      - name: Run Clippy linter
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Check for unused dependencies
        run: |
          cargo install cargo-machete || true
          cargo machete || true

  rust-test:
    name: Rust Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: ["1.75", "stable"]
    defaults:
      run:
        working-directory: ./loxone-mcp-rust
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain ${{ matrix.rust }}
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: loxone-mcp-rust

      - name: Run unit tests
        run: cargo test --lib --verbose
        env:
          RUST_BACKTRACE: 1

      - name: Run integration tests
        run: cargo test --test '*' --verbose
        env:
          RUST_BACKTRACE: 1

      - name: Test with all features
        run: cargo test --all-features --verbose
        env:
          RUST_BACKTRACE: 1

  rust-build:
    name: Rust Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc
    defaults:
      run:
        working-directory: ./loxone-mcp-rust
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          targets: ${{ matrix.target }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: loxone-mcp-rust

      - name: Build debug binary
        run: cargo build --verbose

      - name: Build release binary
        run: cargo build --release --verbose

      - name: Test binary startup (Unix)
        if: runner.os != 'Windows'
        run: |
          timeout 10s ./target/release/loxone-mcp-server --help || exit_code=$?
          if [ $exit_code -eq 124 ]; then
            echo "✅ Binary started successfully (timeout expected)"
          elif [ $exit_code -eq 0 ]; then
            echo "✅ Binary help command worked"
          else
            echo "❌ Binary startup failed with exit code $exit_code"
            exit 1
          fi

      - name: Test binary startup (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          timeout /t 10 target\release\loxone-mcp-server.exe --help || echo Binary startup test completed

      - name: Upload release artifacts
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: rust-binary-${{ matrix.target }}
          path: loxone-mcp-rust/target/release/loxone-mcp-server*

  rust-security:
    name: Rust Security Audit
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./loxone-mcp-rust
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: loxone-mcp-rust

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

      - name: Check for unsafe code blocks
        run: |
          if grep -r "unsafe" src/ --include="*.rs"; then
            echo "⚠️ Found unsafe blocks - please review for security implications"
          else
            echo "✅ No unsafe blocks found"
          fi

  rust-wasm:
    name: Rust WASM Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./loxone-mcp-rust
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          targets: wasm32-wasip2

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: loxone-mcp-rust

      - name: Install wasmtime
        run: |
          curl https://wasmtime.dev/install.sh -sSf | bash
          echo "$HOME/.wasmtime/bin" >> $GITHUB_PATH

      - name: Build WASM target
        run: cargo build --target wasm32-wasip2 --release --verbose

      - name: Test WASM binary
        run: |
          # Test that WASM binary can be loaded
          wasmtime --version
          echo "✅ WASM binary built successfully"
          ls -la target/wasm32-wasip2/release/

      - name: Upload WASM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rust-wasm-binary
          path: loxone-mcp-rust/target/wasm32-wasip2/release/*.wasm

  rust-performance:
    name: Rust Performance Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./loxone-mcp-rust
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: loxone-mcp-rust

      - name: Install cargo-criterion
        run: cargo install cargo-criterion || echo "Failed to install cargo-criterion, skipping"

      - name: Run benchmark tests
        run: |
          if command -v cargo-criterion &> /dev/null; then
            cargo criterion || echo "No benchmarks found, skipping"
          else
            echo "Cargo-criterion not available, running basic performance test"
            cargo test --release bench -- --nocapture || echo "No benchmark tests found"
          fi

      - name: Memory usage test
        run: |
          # Build and check binary size
          cargo build --release
          ls -lh target/release/loxone-mcp-server*
          echo "✅ Binary size check completed"

  rust-documentation:
    name: Rust Documentation
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./loxone-mcp-rust
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: loxone-mcp-rust

      - name: Generate documentation
        run: cargo doc --all-features --no-deps --verbose

      - name: Check for missing documentation
        run: |
          cargo doc --all-features --no-deps 2>&1 | tee doc_output.txt
          if grep -i "warning.*missing documentation" doc_output.txt; then
            echo "⚠️ Found missing documentation warnings"
          else
            echo "✅ Documentation checks passed"
          fi

      - name: Upload documentation
        uses: actions/upload-artifact@v4
        with:
          name: rust-documentation
          path: loxone-mcp-rust/target/doc/

  # Cross-language integration test
  integration-test:
    name: Integration Test (Python + Rust)
    runs-on: ubuntu-latest
    needs: [rust-build, build]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: loxone-mcp-rust

      - name: Install Python dependencies
        run: uv sync --dev

      - name: Build Rust binary
        run: |
          cd loxone-mcp-rust
          cargo build --release

      - name: Test both implementations exist
        run: |
          echo "=== Python Implementation ===" 
          uv run python -c "from loxone_mcp import mcp; print('✅ Python MCP server available')"
          
          echo "=== Rust Implementation ==="
          ./loxone-mcp-rust/target/release/loxone-mcp-server --help | head -5
          echo "✅ Rust MCP server available"

      - name: Compare MCP capabilities
        run: |
          echo "=== Comparing MCP implementations ==="
          echo "Python tools:"
          uv run python -c "
          import inspect
          from loxone_mcp.server import mcp
          import loxone_mcp.server as server_module
          tools = []
          for name, obj in inspect.getmembers(server_module):
              if inspect.isfunction(obj) and not name.startswith('_'):
                  try:
                      source = inspect.getsource(obj)
                      if '@mcp.tool(' in source or '@mcp.tool()' in source:
                          tools.append(name)
                  except (OSError, TypeError):
                      continue
          print(f'Python implementation: {len(tools)} tools')
          "
          
          echo "Rust implementation built successfully"
          echo "✅ Both implementations are functional"
